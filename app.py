import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ü—Ä–æ–º–æ-–ü—Ä–æ–¥–∞–∂", layout="wide", initial_sidebar_state="expanded")

# –ö–∞—Å—Ç–æ–º CSS –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
st.markdown("""
<style>
.metric {background-color: #f0f2f6; padding: 10px; border-radius: 5px;}
.stButton > button {background-color: #4ECDC4; color: white;}
</style>
""", unsafe_allow_html=True)

st.title("üöÄ –î–∞—à–±–æ—Ä–¥: –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –∞–∫—Ü–∏–∏")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
DAYS_ON_SALE = st.sidebar.slider("–î–Ω–∏ –∞–∫—Ü–∏–∏:", min_value=1, max_value=30, value=30)
sheet_sales = st.sidebar.selectbox("–õ–∏—Å—Ç –ø—Ä–æ–¥–∞–∂:", options=["–ü—Ä–æ–¥–∞–∂–∏"], index=0)  # –ü–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
sheet_prices = st.sidebar.selectbox("–õ–∏—Å—Ç —Ü–µ–Ω:", options=["–¶–µ–Ω—ã"], index=0)  # –ü–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.rerun()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(uploaded_file):
    try:
        sales_data = pd.read_excel(uploaded_file, sheet_name=sheet_sales)
        price_data = pd.read_excel(uploaded_file, sheet_name=sheet_prices)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        price_data.rename(columns={'–¶–µ–Ω–∞': '–¶–µ–Ω–∞'}, inplace=True)
        price_data['–¶–µ–Ω–∞'] = pd.to_numeric(price_data['–¶–µ–Ω–∞'], errors='coerce')
        if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in price_data.columns:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            pass
        
        sales_data['–î–∞—Ç–∞'] = pd.to_datetime(sales_data['–î–∞—Ç–∞'], format="%d.%m.%Y")
        sales_data.set_index('–î–∞—Ç–∞', inplace=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        merged_data = sales_data.merge(price_data, on='–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', how='left')
        merged_data['–¶–µ–Ω–∞_x'] = pd.to_numeric(merged_data['–¶–µ–Ω–∞_x'], errors='coerce')
        
        return sales_data, price_data, merged_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None, None, None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ü—Ä–æ–¥–∞–∂–∏.xlsx", type=['xlsx'])
if uploaded_file is not None:
    sales_data, price_data, merged_data = load_data(uploaded_file)
    
    if merged_data is not None:
        # –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ list –¥–ª—è selectbox)
        unique_items_array = merged_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'].dropna().unique()
        unique_items = list(unique_items_array)
        
        if len(unique_items) == 0:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
        else:
            # –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            selected_item = st.selectbox("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", unique_items)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in price_data.columns:
                name_row = price_data[price_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == selected_item]
                if not name_row.empty:
                    product_name = name_row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].iloc[0]
                    st.markdown(f"**üìù –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:** {product_name}")
                else:
                    st.warning("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
            else:
                st.warning("–°—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '–¶–µ–Ω—ã'.")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            item_data = merged_data[merged_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == selected_item].dropna(subset=['–¶–µ–Ω–∞_x', '–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.'])
            
            if len(item_data) < 30:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {selected_item} (–Ω—É–∂–Ω–æ ‚â•30 –∑–∞–ø–∏—Å–µ–π).")
            else:
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar = st.progress(0)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ X –∏ y
                X = item_data[['–¶–µ–Ω–∞_x']].values
                y = item_data['–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.'].values
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                model = LinearRegression()
                model.fit(X, y)
                progress_bar.progress(50)
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                coef = model.coef_[0]
                corr = np.corrcoef(X.flatten(), y)[0,1]
                
                # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                avg_sales = np.mean(y)
                avg_price = np.mean(X)
                
                # –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
                price_coefficient = model.coef_[0]
                elasticity = price_coefficient * (avg_price / avg_sales)
                
                # –§–∏–∫—Å: –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è ‚Äî –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–º–æ-–ª–æ–≥–∏–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º intercept
                if elasticity > 0:
                    st.warning(f"**–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–æ–±—ã—á–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–≤—ã—à–µ —Ü–µ–Ω–∞ ‚Üí –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂). –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑–∞.**")
                    new_coef = -abs(coef)
                    new_intercept = avg_sales - new_coef * avg_price
                    model.coef_ = np.array([new_coef])
                    model.intercept_ = new_intercept
                    elasticity = new_coef * (avg_price / avg_sales)
                else:
                    st.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è: –Ω–∏–∂–µ —Ü–µ–Ω–∞ ‚Üí –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂.")
                
                progress_bar.progress(100)
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                last_price = price_data[price_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == selected_item]['–¶–µ–Ω–∞'].iloc[-1]
                
                # Session state –¥–ª—è new_price —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–±—Ä–æ—Å–æ–º –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞
                if 'selected_item' not in st.session_state:
                    st.session_state.selected_item = selected_item
                    st.session_state.new_price = float(last_price)
                if selected_item != st.session_state.selected_item:
                    st.session_state.selected_item = selected_item
                    st.session_state.new_price = float(last_price)
                
                # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã (value –∏–∑ session_state)
                price_min, price_max = item_data['–¶–µ–Ω–∞_x'].min(), item_data['–¶–µ–Ω–∞_x'].max()
                st.session_state.new_price = st.slider("üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∞–∫—Ü–∏–∏ (‚ÇΩ):", min_value=float(price_min), max_value=float(price_max), 
                                                       value=st.session_state.new_price, step=0.1)
                new_price = st.session_state.new_price
                
                # –ö–Ω–æ–ø–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                col_btn1, col_btn2, col_btn3 = st.columns(3)
                if col_btn1.button("üî• –°–∫–∏–¥–∫–∞ 10%"):
                    st.session_state.new_price = avg_price * 0.9
                    st.rerun()
                if col_btn2.button("üí• –°–∫–∏–¥–∫–∞ 20%"):
                    st.session_state.new_price = avg_price * 0.8
                    st.rerun()
                if col_btn3.button("‚û°Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"):
                    st.session_state.new_price = last_price
                    st.rerun()
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏ (—Å clipping)
                daily_raw = model.predict([[new_price]])[0]
                daily_predictions = np.maximum(0, daily_raw)
                total_sales = daily_predictions * DAYS_ON_SALE
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏—è
                price_change_percent = -(((new_price - avg_price) / avg_price) * 100)
                relative_price_change = (new_price - avg_price) / avg_price
                daily_sales_change = elasticity * avg_sales * relative_price_change
                sales_change_1_percent = -((elasticity / 100) * avg_sales)
                
                # üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                col1, col2, col3 = st.columns(3)
                col1.metric("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏ (—à—Ç.)", f"{total_sales:.0f}")
                col2.metric("–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã", f"{elasticity:.2f}")
                col3.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –æ—Ç 1% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã", f"{sales_change_1_percent:.1f}")
                
                col4, col5, col6 = st.columns(3)
                col4.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (–¥–µ–Ω—å, —à—Ç.)", f"{avg_sales:.0f}")
                col5.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (‚ÇΩ)", f"{avg_price:.1f}")
                col6.metric("% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã", f"{price_change_percent:.1f}%")
                
                col7, col8 = st.columns(2)
                col7.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂(–ø–ª—é—Å–æ–º –∫ —Å—Ä–µ–¥–Ω–∏–º), —à—Ç.", f"{daily_sales_change:.1f}")
                col8.metric("–ù–æ–≤–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", f"{new_price:.1f}")
                
                # üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ –±–∞—Ä–∞)
                st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
                comparison_df = pd.DataFrame({
                    '–°—Ü–µ–Ω–∞—Ä–∏–π': ['–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞'],
                    '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ (—à—Ç.)': [avg_sales * DAYS_ON_SALE, total_sales]
                })
                fig_line = px.line(comparison_df, x='–°—Ü–µ–Ω–∞—Ä–∏–π', y='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ (—à—Ç.)', 
                                   title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏",
                                   markers=True, color_discrete_sequence=["#FF6B6B", "#4ECDC4"])
                fig_line.add_annotation(x=0, y=avg_sales * DAYS_ON_SALE, text=f"{avg_sales * DAYS_ON_SALE:.0f} —à—Ç.", showarrow=False)
                fig_line.add_annotation(x=1, y=total_sales, text=f"{total_sales:.0f} —à—Ç.", showarrow=False)
                st.plotly_chart(fig_line, use_container_width=True)
                
                # üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                st.subheader("üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –æ—Ç —Ü–µ–Ω—ã")
                fig = px.scatter(x=item_data['–¶–µ–Ω–∞_x'], y=item_data['–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.'], 
                                 trendline="ols", title=f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –æ—Ç —Ü–µ–Ω—ã –¥–ª—è {selected_item}",
                                 labels={'–¶–µ–Ω–∞_x': '–¶–µ–Ω–∞ (‚ÇΩ)', 'y': '–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)'})
                fig.add_vline(x=new_price, line_dash="dash", line_color="red", 
                               annotation_text=f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.1f} ‚ÇΩ (–ø—Ä–æ–≥–Ω–æ–∑ –¥–µ–Ω—å: {daily_predictions:.0f} —à—Ç.)")
                st.plotly_chart(fig, use_container_width=True)
                
                # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞—Ç–∞–º (–µ—Å–ª–∏ '–î–∞—Ç–∞' –¥–æ—Å—Ç—É–ø–Ω–∞)
                if '–î–∞—Ç–∞' in item_data.reset_index().columns:
                    st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–∞—Ç–∞–º")
                    fig_line = px.line(item_data.reset_index(), x='–î–∞—Ç–∞', y='–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.', 
                                       title=f"–ü—Ä–æ–¥–∞–∂–∏ {selected_item} –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                    st.plotly_chart(fig_line, use_container_width=True)
                
                # üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                details_df = pd.DataFrame({
                    '–ú–µ—Ç—Ä–∏–∫–∞': ['–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏', '–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã', '% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã', 
                               '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂(–ø–ª—é—Å–æ–º –∫ —Å—Ä–µ–¥–Ω–∏–º), —à—Ç.', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –æ—Ç 1% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [f"{total_sales:.0f} —à—Ç.", f"{elasticity:.2f}", f"{price_change_percent:.1f}%", 
                                f"{daily_sales_change:.1f} —à—Ç.", f"{sales_change_1_percent:.1f} —à—Ç."]
                })
                st.table(details_df)
                
                # –ü–æ—è—Å–Ω–µ–Ω–∏—è
                st.subheader("‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Ä–∞—Å—á—ë—Ç–∞–º")
                st.markdown("""
                - **–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å**: % –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –Ω–∞ 1% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è = —Å–∫–∏–¥–∫–∞ —Ä–∞—Å—Ç–∏—Ç –ø—Ä–æ–¥–∞–∂–∏).
                - **% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã**: –°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —Å–∫–∏–¥–∫–∞).
                - **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂**: –†–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å (elasticity √ó —Å—Ä–µ–¥–Ω–∏–µ √ó % –∏–∑–º–µ–Ω–µ–Ω–∏—è / 100).
                - **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç 1%**: –†–æ—Å—Ç –Ω–∞ 1% —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.
                - **–ü—Ä–æ–≥–Ω–æ–∑**: –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π (clipped ‚â•0) √ó {} –¥–Ω–µ–π.
                """.format(DAYS_ON_SALE))
                
                # –≠–∫—Å–ø–æ—Ä—Ç CSV
                if st.button("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫ CSV"):
                    csv = details_df.to_csv(index=False).encode('utf-8')
                    st.download_button("–°–∫–∞—á–∞—Ç—å", csv, "promo_forecast.csv", "text/csv")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel"):
                    forecast_results = []
                    for item in unique_items:
                        item_data_full = merged_data[merged_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == item].dropna(subset=['–¶–µ–Ω–∞_x', '–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.'])
                        if len(item_data_full) < 30:
                            continue
                        X_full = item_data_full[['–¶–µ–Ω–∞_x']].values
                        y_full = item_data_full['–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–æ, —à—Ç.'].values
                        if np.isnan(X_full).any() or np.isnan(y_full).any():
                            continue
                        model_f = LinearRegression()
                        model_f.fit(X_full, y_full)
                        avg_sales_f = np.mean(y_full)
                        avg_price_f = np.mean(X_full)
                        elasticity_f = model_f.coef_[0] * (avg_price_f / avg_sales_f)
                        if elasticity_f > 0:
                            coef_f = -abs(model_f.coef_[0])
                            new_intercept_f = avg_sales_f - coef_f * avg_price_f
                            model_f.coef_ = np.array([coef_f])
                            model_f.intercept_ = new_intercept_f
                            elasticity_f = coef_f * (avg_price_f / avg_sales_f)
                        last_price_f = price_data[price_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == item]['–¶–µ–Ω–∞'].iloc[-1]
                        daily_raw_f = model_f.predict([[last_price_f]])[0]
                        daily_pred_f = np.maximum(0, daily_raw_f)
                        total_sales_f = daily_pred_f * DAYS_ON_SALE
                        price_change_percent_f = -(((last_price_f - avg_price_f) / avg_price_f) * 100)
                        relative_price_change_f = (last_price_f - avg_price_f) / avg_price_f
                        daily_sales_change_f = elasticity_f * avg_sales_f * relative_price_change_f
                        sales_change_1_percent_f = -((elasticity_f / 100) * avg_sales_f)
                        forecast_results.append({
                            '–ö–æ–¥ –¢–æ–≤–∞—Ä–∞': item,
                            '–¶–µ–Ω–∞': last_price_f,
                            '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏': total_sales_f,
                            '–°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏, —à—Ç.': avg_sales_f,
                            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': avg_price_f,
                            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏': elasticity_f,
                            '% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã': price_change_percent_f,
                            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂(–ø–ª—é—Å–æ–º –∫ —Å—Ä–µ–¥–Ω–∏–º), —à—Ç.': daily_sales_change_f,
                            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –æ—Ç 1% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã': sales_change_1_percent_f
                        })
                    
                    forecast_df = pd.DataFrame(forecast_results)
                    with pd.ExcelWriter('–ø—Ä–æ–≥–Ω–æ–∑_–ø—Ä–æ–¥–∞–∂_–Ω–∞_–∞–∫—Ü–∏–∏.xlsx', engine='openpyxl') as writer:
                        forecast_df.to_excel(writer, sheet_name='–ü—Ä–æ–≥–Ω–æ–∑', index=False)
                    st.success("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –ø—Ä–æ–≥–Ω–æ–∑_–ø—Ä–æ–¥–∞–∂_–Ω–∞_–∞–∫—Ü–∏–∏.xlsx")
else:
    st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")